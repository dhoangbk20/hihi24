// Generated by gencpp from file swri_roscpp/TestTopicServiceRequest.msg
// DO NOT EDIT!


#ifndef SWRI_ROSCPP_MESSAGE_TESTTOPICSERVICEREQUEST_H
#define SWRI_ROSCPP_MESSAGE_TESTTOPICSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <marti_common_msgs/ServiceHeader.h>

namespace swri_roscpp
{
template <class ContainerAllocator>
struct TestTopicServiceRequest_
{
  typedef TestTopicServiceRequest_<ContainerAllocator> Type;

  TestTopicServiceRequest_()
    : srv_header()
    , request_value(0)  {
    }
  TestTopicServiceRequest_(const ContainerAllocator& _alloc)
    : srv_header(_alloc)
    , request_value(0)  {
  (void)_alloc;
    }



   typedef  ::marti_common_msgs::ServiceHeader_<ContainerAllocator>  _srv_header_type;
  _srv_header_type srv_header;

   typedef int32_t _request_value_type;
  _request_value_type request_value;





  typedef boost::shared_ptr< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TestTopicServiceRequest_

typedef ::swri_roscpp::TestTopicServiceRequest_<std::allocator<void> > TestTopicServiceRequest;

typedef boost::shared_ptr< ::swri_roscpp::TestTopicServiceRequest > TestTopicServiceRequestPtr;
typedef boost::shared_ptr< ::swri_roscpp::TestTopicServiceRequest const> TestTopicServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator1> & lhs, const ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.srv_header == rhs.srv_header &&
    lhs.request_value == rhs.request_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator1> & lhs, const ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swri_roscpp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62086d0669b9627ef32b14cac1955c4c";
  }

  static const char* value(const ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62086d0669b9627eULL;
  static const uint64_t static_value2 = 0xf32b14cac1955c4cULL;
};

template<class ContainerAllocator>
struct DataType< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swri_roscpp/TestTopicServiceRequest";
  }

  static const char* value(const ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Test message used only for swri_roscpp unit tests\n"
"# Messages for TopicServices would normally be generated by the add_topic_service_files CMake macro\n"
"marti_common_msgs/ServiceHeader srv_header\n"
"int32 request_value\n"
"\n"
"================================================================================\n"
"MSG: marti_common_msgs/ServiceHeader\n"
"# This message contains all of the data filled in automatically by the service system\n"
"# It is required in each request and response message to be named srv_header\n"
"time stamp\n"
"uint32 sequence\n"
"string sender\n"
"bool result # Used to indicate if the service request was successful or not\n"
;
  }

  static const char* value(const ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.srv_header);
      stream.next(m.request_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TestTopicServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swri_roscpp::TestTopicServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "srv_header: ";
    s << std::endl;
    Printer< ::marti_common_msgs::ServiceHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.srv_header);
    s << indent << "request_value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.request_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWRI_ROSCPP_MESSAGE_TESTTOPICSERVICEREQUEST_H
