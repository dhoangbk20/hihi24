// Generated by gencpp from file marti_dbw_msgs/TransmissionFeedback.msg
// DO NOT EDIT!


#ifndef MARTI_DBW_MSGS_MESSAGE_TRANSMISSIONFEEDBACK_H
#define MARTI_DBW_MSGS_MESSAGE_TRANSMISSIONFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace marti_dbw_msgs
{
template <class ContainerAllocator>
struct TransmissionFeedback_
{
  typedef TransmissionFeedback_<ContainerAllocator> Type;

  TransmissionFeedback_()
    : header()
    , current_range()
    , stable(false)
    , reverse(false)
    , forward(false)  {
    }
  TransmissionFeedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , current_range(_alloc)
    , stable(false)
    , reverse(false)
    , forward(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_range_type;
  _current_range_type current_range;

   typedef uint8_t _stable_type;
  _stable_type stable;

   typedef uint8_t _reverse_type;
  _reverse_type reverse;

   typedef uint8_t _forward_type;
  _forward_type forward;





  typedef boost::shared_ptr< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct TransmissionFeedback_

typedef ::marti_dbw_msgs::TransmissionFeedback_<std::allocator<void> > TransmissionFeedback;

typedef boost::shared_ptr< ::marti_dbw_msgs::TransmissionFeedback > TransmissionFeedbackPtr;
typedef boost::shared_ptr< ::marti_dbw_msgs::TransmissionFeedback const> TransmissionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator1> & lhs, const ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.current_range == rhs.current_range &&
    lhs.stable == rhs.stable &&
    lhs.reverse == rhs.reverse &&
    lhs.forward == rhs.forward;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator1> & lhs, const ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20d42db6f4086e2557c494444b704d8c";
  }

  static const char* value(const ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20d42db6f4086e25ULL;
  static const uint64_t static_value2 = 0x57c494444b704d8cULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_dbw_msgs/TransmissionFeedback";
  }

  static const char* value(const ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"string current_range\n"
"\n"
"# This is false during shifting when the actuator is moving or\n"
"# settling into the final position.\n"
"bool stable\n"
"\n"
"# This is true when the vehicle is in a reversing gear.\n"
"bool reverse\n"
"\n"
"# This is true when the vehicle is in a forward gear.\n"
"bool forward\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.current_range);
      stream.next(m.stable);
      stream.next(m.reverse);
      stream.next(m.forward);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransmissionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_dbw_msgs::TransmissionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "current_range: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_range);
    s << indent << "stable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stable);
    s << indent << "reverse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse);
    s << indent << "forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.forward);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_DBW_MSGS_MESSAGE_TRANSMISSIONFEEDBACK_H
