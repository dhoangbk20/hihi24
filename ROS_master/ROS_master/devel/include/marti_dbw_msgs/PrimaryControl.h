// Generated by gencpp from file marti_dbw_msgs/PrimaryControl.msg
// DO NOT EDIT!


#ifndef MARTI_DBW_MSGS_MESSAGE_PRIMARYCONTROL_H
#define MARTI_DBW_MSGS_MESSAGE_PRIMARYCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace marti_dbw_msgs
{
template <class ContainerAllocator>
struct PrimaryControl_
{
  typedef PrimaryControl_<ContainerAllocator> Type;

  PrimaryControl_()
    : header()
    , active(false)
    , estop(false)
    , steering_command(0.0)
    , throttle_command(0.0)
    , brake_command(0.0)  {
    }
  PrimaryControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , active(false)
    , estop(false)
    , steering_command(0.0)
    , throttle_command(0.0)
    , brake_command(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _active_type;
  _active_type active;

   typedef uint8_t _estop_type;
  _estop_type estop;

   typedef float _steering_command_type;
  _steering_command_type steering_command;

   typedef float _throttle_command_type;
  _throttle_command_type throttle_command;

   typedef float _brake_command_type;
  _brake_command_type brake_command;





  typedef boost::shared_ptr< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> const> ConstPtr;

}; // struct PrimaryControl_

typedef ::marti_dbw_msgs::PrimaryControl_<std::allocator<void> > PrimaryControl;

typedef boost::shared_ptr< ::marti_dbw_msgs::PrimaryControl > PrimaryControlPtr;
typedef boost::shared_ptr< ::marti_dbw_msgs::PrimaryControl const> PrimaryControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator1> & lhs, const ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.active == rhs.active &&
    lhs.estop == rhs.estop &&
    lhs.steering_command == rhs.steering_command &&
    lhs.throttle_command == rhs.throttle_command &&
    lhs.brake_command == rhs.brake_command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator1> & lhs, const ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marti_dbw_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27c1b402f9d823bdca2b54b539b73c0d";
  }

  static const char* value(const ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27c1b402f9d823bdULL;
  static const uint64_t static_value2 = 0xca2b54b539b73c0dULL;
};

template<class ContainerAllocator>
struct DataType< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marti_dbw_msgs/PrimaryControl";
  }

  static const char* value(const ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"bool active\n"
"bool estop\n"
"\n"
"float32 steering_command\n"
"# Steering command in range [0.0 to 1.0]\n"
"\n"
"float32 throttle_command\n"
"# Throttle command in range [0.0 to 1.0]\n"
"\n"
"float32 brake_command\n"
"# Brake command in range [0.0 to 1.0]\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.active);
      stream.next(m.estop);
      stream.next(m.steering_command);
      stream.next(m.throttle_command);
      stream.next(m.brake_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PrimaryControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marti_dbw_msgs::PrimaryControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
    s << indent << "estop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.estop);
    s << indent << "steering_command: ";
    Printer<float>::stream(s, indent + "  ", v.steering_command);
    s << indent << "throttle_command: ";
    Printer<float>::stream(s, indent + "  ", v.throttle_command);
    s << indent << "brake_command: ";
    Printer<float>::stream(s, indent + "  ", v.brake_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARTI_DBW_MSGS_MESSAGE_PRIMARYCONTROL_H
