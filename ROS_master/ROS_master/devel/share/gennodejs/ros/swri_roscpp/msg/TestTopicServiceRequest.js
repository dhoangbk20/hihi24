// Auto-generated. Do not edit!

// (in-package swri_roscpp.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let marti_common_msgs = _finder('marti_common_msgs');

//-----------------------------------------------------------

class TestTopicServiceRequest {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.srv_header = null;
      this.request_value = null;
    }
    else {
      if (initObj.hasOwnProperty('srv_header')) {
        this.srv_header = initObj.srv_header
      }
      else {
        this.srv_header = new marti_common_msgs.msg.ServiceHeader();
      }
      if (initObj.hasOwnProperty('request_value')) {
        this.request_value = initObj.request_value
      }
      else {
        this.request_value = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type TestTopicServiceRequest
    // Serialize message field [srv_header]
    bufferOffset = marti_common_msgs.msg.ServiceHeader.serialize(obj.srv_header, buffer, bufferOffset);
    // Serialize message field [request_value]
    bufferOffset = _serializer.int32(obj.request_value, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type TestTopicServiceRequest
    let len;
    let data = new TestTopicServiceRequest(null);
    // Deserialize message field [srv_header]
    data.srv_header = marti_common_msgs.msg.ServiceHeader.deserialize(buffer, bufferOffset);
    // Deserialize message field [request_value]
    data.request_value = _deserializer.int32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += marti_common_msgs.msg.ServiceHeader.getMessageSize(object.srv_header);
    return length + 4;
  }

  static datatype() {
    // Returns string type for a message object
    return 'swri_roscpp/TestTopicServiceRequest';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '62086d0669b9627ef32b14cac1955c4c';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # Test message used only for swri_roscpp unit tests
    # Messages for TopicServices would normally be generated by the add_topic_service_files CMake macro
    marti_common_msgs/ServiceHeader srv_header
    int32 request_value
    
    ================================================================================
    MSG: marti_common_msgs/ServiceHeader
    # This message contains all of the data filled in automatically by the service system
    # It is required in each request and response message to be named srv_header
    time stamp
    uint32 sequence
    string sender
    bool result # Used to indicate if the service request was successful or not
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new TestTopicServiceRequest(null);
    if (msg.srv_header !== undefined) {
      resolved.srv_header = marti_common_msgs.msg.ServiceHeader.Resolve(msg.srv_header)
    }
    else {
      resolved.srv_header = new marti_common_msgs.msg.ServiceHeader()
    }

    if (msg.request_value !== undefined) {
      resolved.request_value = msg.request_value;
    }
    else {
      resolved.request_value = 0
    }

    return resolved;
    }
};

module.exports = TestTopicServiceRequest;
